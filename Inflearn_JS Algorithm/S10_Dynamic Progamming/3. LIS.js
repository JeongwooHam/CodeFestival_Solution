/*
[최대 부분 증가수열]
N개의 자연수로 이루어진 수열이 주어졌을 때, 
그 중에서 가장 길게 증가하는(작은 수에서 큰 수로) 원소들의 집합을 찾는 프로그램을 작성하라. 
예를 들어, 원소가 2, 7, 5, 8, 6, 4, 7, 12, 3 일 때
가장 길게 증가하도록 원소들을 차례대로 뽑아내면 
2, 5, 6, 7, 12를 뽑아내어 길이가 5인 최대 부분 증가수열을 만들 수 있다.
*/

/*
🚩 동적 계산법으로 풀어보기
1. 입력된 배열을 arr이라는 변수에 담는다.
2. 동일한 길이의 dynamic table을 생성한다.
   - dy[i]: arr의 i번째 숫자가 증가수열의 마지막 숫자
   - i번째 숫자를 마지막 요소로 두는 최대 증가 수열의 길이가 해당 인덱스에 들어간다.

예시

arr  | 5 | 3 | 7 | 8 | 6 | 2 | 9 | 4 |
dy   | 1 | 1 | 2 | 3 | 2 | 1 | 4 | 2 |
- 앞부분만 탐색 가능 ( j = i-1 ~ 0 )
- 될 수 있는 것 중 가장 긴 것을 택한다.
- 이 중 최대값을 찾아서 출력한다.
*/

const solution = (data) => {
  let dy = Array.from({ length: data.length }, () => 0);
  dy[0] = 1;
  for (let i = 1; i < data.length; i++) {
    let max = 0; // 참인 경우가 하나도 없으면 자기 자신만을 충족하는 길이가 1인 수열이 되도록 0으로 초기화
    for (let j = i - 1; j >= 0; j--) {
      // arr에서 해당 값보다 작으면서 dy 상에서 가능한 증가수열의 길이가 제일 큰 경우
      if (data[j] < data[i] && dy[j] > max) {
        max = dy[j];
      }
    }
    dy[i] = max + 1;
    answer = Math.max(answer, dy[i]);
  }
};

console.log(solution([5, 3, 7, 8, 6, 2, 9, 4]));
