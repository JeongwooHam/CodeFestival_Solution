/*
[마구간 정하기 (결정 알고리즘)]
N개의 마구간이 수직선상에 있습니다. 
각 마구간은 x1, x2, x3, ......, xN의 좌표를 가지며, 마구간간에 좌표가 중복되는 일은 없습니다.
현수는 C마리의 말을 가지고 있는데, 이 말들은 서로 가까이 있는 것을 좋아하지 않습니다.
각 마구간에는 한 마리의 말만 넣을 수 있고, 가장 가까운 두 말의 거리가 최대가 되게 말을 마구간에 배치하고 싶습니다.
C마리의 말을 N개의 마구간에 배치했을 때 가장 가까운 두 말의 거리가 최대가 되는 그 최대값을 출력하는 프로그램을 작성하세요.
*/

/*
🥸 예상 풀이법
1. lt는 Math.max 값, rt는 reduce 값이 된다.
2. 처음부터 더해서 mid 값만큼 띄운 뒤 나머지 말도 배치한다. (뒤에 n-1개 만큼의 요소가 남아있어야 한다.)
3. 어떻게 하지..?

🚩 해답
1. arr을 sort 해준다. (순서를 지킬 필요가 없었다니...!)
|---1---|---2---|---4---|---8---|---9---|
2. lt는 1, rt는 arr[arr.length-1] 값이 된다. (최솟값보다 거리가 가까울수도 있으므로 lt가 arr[0]면 안 된다!)
3. mid 값이 가장 가까운 두 말의 최대 거리가 되는지 확인한다.
    - 첫 번째 말을 1에 둔다. ep = 1
    - 현재 값 - ep가 mid보다 클 때까지 반복한다. > 조건을 만족할 경우 해당 값으로 ep를 교체한다.
4. c만큼의 말을 다 넣지 못하면 답이 될 수 없다.
    - rt - mid - 1 로 바꿔서 반복한다.
5. 되는 경우 answer = mid > lt = mid + 1로 바꿔서 반복한다.
*/

// 가장 가까운 두 말의 거리를 n으로 두었을 떄 좌표 목록 arr에 대해 최대로 배치할 수 있는 말의 수를 구하는 함수
const handleCount = (arr, n) => {
  // cnt: 말의 수, ep: 마지막에 말을 놓은 위치
  let cnt = 1,
    ep = arr[0];
  for (let i = 1; i < arr.length; i++) {
    // 최후로 말을 놓은 위치애 대해 현 위치에 말을 놓을 수 있는지 구하는 조건식
    // 가장 가까운 두 말의 거리인 n보다는 크거나 같아야 함
    if (arr[i] - ep >= n) {
      cnt++;
      ep = arr[i];
    }
  } // else일 때는 그냥 지나가면 됨
  return cnt;
};

const solution = (c, arr) => {
  arr.sort((a, b) => a - b);
  let lt = 1;
  let rt = arr[arr.length - 1];
  while (lt <= rt) {
    let mid = parseInt((lt + rt) / 2);
    if (cnt(arr, mid) >= c) {
      answer = mid;
      lt = mid + 1;
    } else rt = mid - 1; // mid로 말을 배치할 수 없는 경우
  }
};
console.log(solution(3, [1, 2, 8, 4, 9]));
