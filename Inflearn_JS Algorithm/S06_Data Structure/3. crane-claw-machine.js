/*
[크레인 인형 뽑기]
게임 개발자인 죠르디는 크레인 인형 뽑기 기계를 게임으로 만드려 한다.
죠르디는 게임의 재미를 높이기 위해 화면 구성과 규칙을 아래와 같이 게임 로직에 반영하려고 한다.

게임 화면은 1 x 1 크기의 칸들로 이루어진 N x N 크기의 정사각 격자이며 
위쪽에는 크레인이 있고 오른쪽에는 바구니가 있다. 
각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸이다. 
모든 인형은 1 x 1 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있다. 
게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있다. 
집어 올린 인형은 바구니에 쌓이게 되는데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 된다. 
만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 
두 인형은 터뜨려지면서 바구니에서 사라지게 된다. 
크레인 작동 시 인형이 집어지지 않는 경우는 없으나 
만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않는다. 
또한 바구니는 모든 인형이 들어갈 수 있을만큼 충분히 크다고 가정한다.
게임 화면의 격자의 상태가 담긴 2차원 배열 board와 
인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 
크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성하라.
*/

/*
🥸 예상 풀이법
1. for문으로 moves를 돈다.
2. moves 각 요소에 해당하는 값을 찾기 위해 board를 for문으로 돈다. (열 고정)
   1) 돌면서 0이 아닌 값을 stack에 넣고, 해당 값은 0으로 바꾼다.
   2) 모두 0인 경우 아무것도 담지 않고 해당 턴을 끝낸다.
3. push하기 전 이전 값을 검사해 둘이 같으면 push하는 대신 pop한다. 이때 answer+=2 (두 개!!)
*/

const solution = (board, moves) => {
  let answer = 0;
  let stack = [];
  moves.forEach((pos) => {
    for (let i = 0; i < board.length; i++) {
      // 0이 아닌 값 찾기
      if (board[i][pos - 1] !== 0) {
        let tmp = board[i][pos - 1];
        board[i][pos - 1] = 0;
        // 꺼낸 인형이 stack 상단의 값과 같은지 비교
        if (tmp === stack[stack.length - 1]) {
          stack.pop();
          answer += 2;
        } else stack.push(tmp);
        // 💡 한 번 찾으면 더 이상 탐색하지 않도록 for문을 멈춰주어야 함!!
        break;
      }
    }
  });

  return answer;
};

console.log(
  solution(
    [
      [0, 0, 0, 0, 0],
      [0, 0, 1, 0, 3],
      [0, 2, 5, 0, 1],
      [4, 2, 4, 4, 2],
      [3, 5, 1, 3, 1],
    ],
    [1, 5, 3, 5, 1, 2, 1, 4]
  )
);
